# Generated by Django 5.1.6 on 2025-03-03 11:46

import apis_core.generic.abc
import django.db.models.deletion
import django_interval.fields
import django_json_editor_field.fields
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('apis_metainfo', '0016_remove_rootobject_self_contenttype'),
        ('relations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EngagedIn',
            fields=[
                ('relation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='relations.relation')),
                ('typen', models.CharField(choices=[('employed', 'employed'), ('hired', 'hired'), ('leading', 'leading')])),
                ('begin', django_interval.fields.FuzzyDateParserField(blank=True)),
                ('end', django_interval.fields.FuzzyDateParserField(blank=True)),
                ('begin_date_sort', models.DateField(blank=True, editable=False, null=True)),
                ('begin_date_from', models.DateField(blank=True, editable=False, null=True)),
                ('begin_date_to', models.DateField(blank=True, editable=False, null=True)),
                ('end_date_sort', models.DateField(blank=True, editable=False, null=True)),
                ('end_date_from', models.DateField(blank=True, editable=False, null=True)),
                ('end_date_to', models.DateField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'engaged in',
                'verbose_name_plural': 'engaged in',
            },
            bases=('relations.relation',),
        ),
        migrations.CreateModel(
            name='Includes',
            fields=[
                ('relation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='relations.relation')),
                ('begin', django_interval.fields.FuzzyDateParserField(blank=True)),
                ('end', django_interval.fields.FuzzyDateParserField(blank=True)),
                ('begin_date_sort', models.DateField(blank=True, editable=False, null=True)),
                ('begin_date_from', models.DateField(blank=True, editable=False, null=True)),
                ('begin_date_to', models.DateField(blank=True, editable=False, null=True)),
                ('end_date_sort', models.DateField(blank=True, editable=False, null=True)),
                ('end_date_from', models.DateField(blank=True, editable=False, null=True)),
                ('end_date_to', models.DateField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'includes',
                'verbose_name_plural': 'include',
            },
            bases=('relations.relation',),
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
                ('rootobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='apis_metainfo.rootobject')),
                ('label', models.CharField(help_text='PrefLabel in German', max_length=255)),
                ('abbreviation', models.CharField(blank=True, max_length=100, null=True)),
                ('easydb4_reference', models.CharField(max_length=100)),
                ('system_object_id', models.IntegerField()),
                ('hierarchy', models.CharField(max_length=100)),
                ('alternative_labels', django_json_editor_field.fields.JSONEditorField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Institution',
                'verbose_name_plural': 'Institutions',
                'abstract': False,
            },
            bases=('apis_metainfo.rootobject', models.Model),
        ),
        migrations.CreateModel(
            name='LocatedIn',
            fields=[
                ('relation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='relations.relation')),
                ('begin', django_interval.fields.FuzzyDateParserField(blank=True)),
                ('end', django_interval.fields.FuzzyDateParserField(blank=True)),
                ('begin_date_sort', models.DateField(blank=True, editable=False, null=True)),
                ('begin_date_from', models.DateField(blank=True, editable=False, null=True)),
                ('begin_date_to', models.DateField(blank=True, editable=False, null=True)),
                ('end_date_sort', models.DateField(blank=True, editable=False, null=True)),
                ('end_date_from', models.DateField(blank=True, editable=False, null=True)),
                ('end_date_to', models.DateField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'located in',
                'verbose_name_plural': 'located in',
            },
            bases=('relations.relation',),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('rootobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='apis_metainfo.rootobject')),
                ('label', models.CharField(blank=True, default='', max_length=4096)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('feature_code', models.CharField(blank=True, default='', help_text='<a href="https://www.geonames.org/export/codes.html">Geonames Feature Code List</a>', max_length=16)),
            ],
            options={
                'verbose_name': 'Place',
                'verbose_name_plural': 'Places',
                'abstract': False,
            },
            bases=('apis_metainfo.rootobject', models.Model),
        ),
        migrations.CreateModel(
            name='Profession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
            ],
            bases=(apis_core.generic.abc.GenericModel, models.Model),
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('rootobject_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='apis_metainfo.rootobject')),
                ('label', models.CharField(help_text='PrefLabel in German', max_length=255)),
                ('historical', models.BooleanField(default=True)),
                ('period', models.CharField(blank=True, choices=[('Byzanz', 'Byzanz'), ('Griechen', 'Griechen'), ('Kelten', 'Kelten'), ('Provinzialrom', 'Provinzialrom'), ('Römische Kaiserzeit', 'Römische Kaiserzeit'), ('Römische Republik', 'Römische Republik')], null=True)),
                ('period_detail', models.CharField(blank=True, choices=[('Valentinianische Dynastie', 'Valentinianische Dynastie'), ('Usurpator, Valens', 'Usurpator, Valens'), ('Usurpator, Theodosius', 'Usurpator, Theodosius'), ('Usurpator, Tetrarchie', 'Usurpator, Tetrarchie'), ('Usurpator, Philippus Arabs', 'Usurpator, Philippus Arabs'), ('Usurpator, Gallienus', 'Usurpator, Gallienus'), ('Usurpator, Constantius II.', 'Usurpator, Constantius II.'), ('Theodosianische Dynastie', 'Theodosianische Dynastie'), ('Tetrarchie', 'Tetrarchie'), ('Soldatenkaisertum', 'Soldatenkaisertum'), ('Severische Dynastie', 'Palmyrenisches Reich'), ('Julisch-Claudische Dynastie', 'Julisch-Claudische Dynastie'), ('Gallisches Sonderreich', 'Gallisches Sonderreich'), ('Flavische Dynastie', 'Flavische Dynastie'), ('Constantinische Dynastie', 'Constantinische Dynastie'), ('Bürgerkrieg (68 - 69)', 'Bürgerkrieg (68 - 69)'), ('Bürgerkrieg (193)', 'Bürgerkrieg (193)'), ('Britannisches Sonderreich (286 ? - 297 ?)', 'Britannisches Sonderreich (286 ? - 297 ?)'), ('Adoptivkaisertum', 'Adoptivkaisertum'), ('Boier', 'Boier')], null=True)),
                ('person_type', models.CharField(choices=[('Urheber, Unbekannt', 'Urheber, Unbekannt'), ('archaeologist', 'archaeologist'), ('architect', 'architect'), ('artist', 'artist'), ('collector', 'collector'), ('excavation personnel', 'excavation personnel'), ('explorer', 'explorer'), ('institution personnel', 'institution personnel'), ('mosaicist', 'mosaicist'), ('painter', 'painter'), ('person', 'person'), ('potter', 'potter'), ('sculptor', 'sculptor'), ('vase painter', 'vase painter'), ('Anonymous', 'Anonymous'), ('processer', 'processer')], max_length=255)),
                ('alternative_labels', django_json_editor_field.fields.JSONEditorField(blank=True, null=True)),
                ('profession', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apis_ontology.profession')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'Persons',
                'abstract': False,
            },
            bases=('apis_metainfo.rootobject', models.Model),
        ),
        migrations.CreateModel(
            name='VersionInstitution',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('label', models.CharField(help_text='PrefLabel in German', max_length=255)),
                ('abbreviation', models.CharField(blank=True, max_length=100, null=True)),
                ('easydb4_reference', models.CharField(max_length=100)),
                ('system_object_id', models.IntegerField()),
                ('hierarchy', models.CharField(max_length=100)),
                ('alternative_labels', django_json_editor_field.fields.JSONEditorField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Institution',
                'verbose_name_plural': 'historical Institutions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
        migrations.CreateModel(
            name='VersionPerson',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('label', models.CharField(help_text='PrefLabel in German', max_length=255)),
                ('historical', models.BooleanField(default=True)),
                ('period', models.CharField(blank=True, choices=[('Byzanz', 'Byzanz'), ('Griechen', 'Griechen'), ('Kelten', 'Kelten'), ('Provinzialrom', 'Provinzialrom'), ('Römische Kaiserzeit', 'Römische Kaiserzeit'), ('Römische Republik', 'Römische Republik')], null=True)),
                ('period_detail', models.CharField(blank=True, choices=[('Valentinianische Dynastie', 'Valentinianische Dynastie'), ('Usurpator, Valens', 'Usurpator, Valens'), ('Usurpator, Theodosius', 'Usurpator, Theodosius'), ('Usurpator, Tetrarchie', 'Usurpator, Tetrarchie'), ('Usurpator, Philippus Arabs', 'Usurpator, Philippus Arabs'), ('Usurpator, Gallienus', 'Usurpator, Gallienus'), ('Usurpator, Constantius II.', 'Usurpator, Constantius II.'), ('Theodosianische Dynastie', 'Theodosianische Dynastie'), ('Tetrarchie', 'Tetrarchie'), ('Soldatenkaisertum', 'Soldatenkaisertum'), ('Severische Dynastie', 'Palmyrenisches Reich'), ('Julisch-Claudische Dynastie', 'Julisch-Claudische Dynastie'), ('Gallisches Sonderreich', 'Gallisches Sonderreich'), ('Flavische Dynastie', 'Flavische Dynastie'), ('Constantinische Dynastie', 'Constantinische Dynastie'), ('Bürgerkrieg (68 - 69)', 'Bürgerkrieg (68 - 69)'), ('Bürgerkrieg (193)', 'Bürgerkrieg (193)'), ('Britannisches Sonderreich (286 ? - 297 ?)', 'Britannisches Sonderreich (286 ? - 297 ?)'), ('Adoptivkaisertum', 'Adoptivkaisertum'), ('Boier', 'Boier')], null=True)),
                ('person_type', models.CharField(choices=[('Urheber, Unbekannt', 'Urheber, Unbekannt'), ('archaeologist', 'archaeologist'), ('architect', 'architect'), ('artist', 'artist'), ('collector', 'collector'), ('excavation personnel', 'excavation personnel'), ('explorer', 'explorer'), ('institution personnel', 'institution personnel'), ('mosaicist', 'mosaicist'), ('painter', 'painter'), ('person', 'person'), ('potter', 'potter'), ('sculptor', 'sculptor'), ('vase painter', 'vase painter'), ('Anonymous', 'Anonymous'), ('processer', 'processer')], max_length=255)),
                ('alternative_labels', django_json_editor_field.fields.JSONEditorField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('profession', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='apis_ontology.profession')),
            ],
            options={
                'verbose_name': 'historical Person',
                'verbose_name_plural': 'historical Persons',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
        migrations.CreateModel(
            name='VersionPlace',
            fields=[
                ('rootobject_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='apis_metainfo.rootobject')),
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('version_tag', models.CharField(blank=True, max_length=255, null=True)),
                ('label', models.CharField(blank=True, default='', max_length=4096)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('feature_code', models.CharField(blank=True, default='', help_text='<a href="https://www.geonames.org/export/codes.html">Geonames Feature Code List</a>', max_length=16)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Place',
                'verbose_name_plural': 'historical Places',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model, apis_core.generic.abc.GenericModel),
        ),
    ]
